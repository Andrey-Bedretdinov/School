#include <iostream>
#include <vector>
#include <sstream>

using namespace std;

int main() {
    // Чтение количества вершин в графе
    int N;
    cin >> N;
    
    // Очистка буфера ввода после чтения числа (для дальнейшего использования sstream)
    cin.ignore();

    // Инициализация матрицы достижимости нулями
    vector<vector<int>> reachability(N, vector<int>(N, 0));

    
    for (int i = 0; i < N; ++i) {
        // Установка значения 1 для каждой вершины, так как вершина достижима сама из себя
        reachability[i][i] = 1;
        
        // Чтение строки ввода для текущей вершины
        string line;
        getline(cin, line);
        
        // Преобразование строки в поток для чтения чисел
        stringstream ss(line);
        
        int to;
        // Чтение каждого числа из потока
        while (ss >> to) {
            // Если число не равно 0, устанавливаем значение 1 в матрице достижимости
            if (to != 0) {
                reachability[i][to - 1] = 1;
            }
        }
    }

    // Идея состоит в том, чтобы для каждой пары вершин проверить, 
    // можно ли достичь одну вершину из другой, пройдя через все возможные 
    // промежуточные вершины. Если это возможно, то в матрице достижимости 
    // на соответствующем месте ставим 1, иначе - 0.

    for (int k = 0; k < N; ++k) {
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < N; ++j) {
                // Если вершина i достижима из вершины k и вершина j достижима из вершины k,
                // то вершина j достижима из вершины i
                if (reachability[i][k] && reachability[k][j]) {
                    reachability[i][j] = 1;
                }
            }
        }
    }

    // Вывод матрицы достижимости
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            cout << reachability[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}
